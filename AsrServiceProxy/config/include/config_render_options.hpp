
#ifndef CONFIG_CONFIG_RENDER_OPTIONS_HPP
#define CONFIG_CONFIG_RENDER_OPTIONS_HPP

#include "detail/config_base.hpp"

namespace config {

///
/// _a set of options related to rendering a {@link ConfigValue}. _passed to
/// {@link ConfigValue#render(ConfigRenderOptions)}.
///
/// <p>
/// _here is an example of creating a {@code ConfigRenderOptions}:
///
/// <pre>
///     ConfigRenderOptions options =
///         ConfigRenderOptions::defaults()->set_comments(false)
/// </pre>
///
class ConfigRenderOptions : public ConfigBase {
public:
    CONFIG_CLASS(ConfigRenderOptions);

    ConfigRenderOptions(bool origin_comments, bool comments, bool formatted, bool json);

    /// _returns the default render options which are verbose (commented and
    /// formatted). _see {@link ConfigRenderOptions#concise} for stripped-down
    /// options. _this rendering will not be valid JSON since it has comments.
    ///
    /// @return the default render options
    static ConfigRenderOptionsPtr defaults();

    /// _returns concise render options (no whitespace or comments). _for a
    /// resolved {@link Config}, the concise rendering will be valid JSON.
    ///
    /// @return the concise render options
    static ConfigRenderOptionsPtr concise();

    /// _returns options with comments toggled. _this controls human-written
    /// comments but not the autogenerated "origin of this setting" comments,
    /// which are controlled by {@link ConfigRenderOptions#set_origin_comments}.
    ///
    /// @param value
    ///            true to include comments in the render
    /// @return options with requested setting for comments
    ConfigRenderOptionsPtr set_comments(bool value);

    /// _returns whether the options enable comments. _this method is mostly used
    /// by the config lib internally, not by applications.
    ///
    /// @return true if comments should be rendered
    bool get_comments();

    /// _returns options with origin comments toggled. _if this is enabled, the
    /// library generates comments for each setting based on the
    /// {@link ConfigValue#origin} of that setting's value. _for example these
    /// comments might tell you which file a setting comes from.
    ///
    /// <p>
    /// {@code set_origin_comments()} controls only these autogenerated
    /// "origin of this setting" comments, to toggle regular comments use
    /// {@link ConfigRenderOptions#set_comments}.
    ///
    /// @param value
    ///            true to include autogenerated setting-origin comments in the
    ///            render
    /// @return options with origin comments toggled
    ConfigRenderOptionsPtr set_origin_comments(bool value);

    /// _returns whether the options enable automated origin comments. _this method
    /// is mostly used by the config lib internally, not by applications.
    ///
    /// @return true if origin comments should be rendered
    bool get_origin_comments();

    /// _returns options with formatting toggled. _formatting means indentation and
    /// whitespace, enabling formatting makes things prettier but larger.
    ///
    /// @param value
    ///            true to include comments in the render
    /// @return options with requested setting for formatting
    ConfigRenderOptionsPtr set_formatted(bool value);

    /// _returns whether the options enable formatting. _this method is mostly used
    /// by the config lib internally, not by applications.
    ///
    /// @return true if comments should be rendered
    bool get_formatted();

    /// _returns options with JSON toggled. JSON means that HOCON extensions
    /// (omitting commas, quotes for example) won't be used. _however, whether to
    /// use comments is controlled by the separate {@link #set_comments(boolean)}
    /// and {@link #set_origin_comments(boolean)} options. _so if you enable
    /// comments you will get invalid JSON despite setting this to true.
    ///
    /// @param value
    ///            true to include non-JSON extensions in the render
    /// @return options with requested setting for JSON
    ConfigRenderOptionsPtr set_json(bool value);

    /// _returns whether the options enable JSON. _this method is mostly used by
    /// the config lib internally, not by applications.
    ///
    /// @return true if only JSON should be rendered
    bool get_json();

    virtual std::string to_string() override;

private:
    bool origin_comments;
    bool comments;
    bool formatted;
    bool json;
};

}

#endif // CONFIG_CONFIG_RENDER_OPTIONS_HPP
